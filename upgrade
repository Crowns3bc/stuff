var upgradeMaxLevel = 8;
var upgradeWhitelist = 

	{
		pyjamas: upgradeMaxLevel,
		bunnyears: upgradeMaxLevel,
		carrotsword: upgradeMaxLevel,
		firestaff: 0,
		fireblade: 0,
		sshield: 0,
		shield: 0,
		gloves: 0,
		coat: 0,
		helmet: 0,
		pants: 0,
		shoes: 0,
		gloves1: 0,
		coat1: 0,
		helmet1: 0,
		pants1: 0,
		shoes1: 0,
		harbringer: 0,
		oozingterror: 0,
		bataxe: 0,
		spear: 0,
		xmaspants: 0,
		xmassweater: 0,
		xmashat: 0,
		xmasshoes: 0,
		mittens: 0,
		ornamentstaff: 0,
		candycanesword: 0,
		warmscarf: 0,
		t2bow: 0,
		pmace: 0,
		staff: 0,
		basher: 0,
		harmor: 0,
		hgloves: 0,
		bow: 0,
		quiver: 0,
		blade: 0,
		wshield: 0,
		wingedboots: 0,
		swordofthedead: 0,
		wbreeches: 0
	};

var combineWhitelist = 

	{
		wbook0: 0,
		lostearring: 0,
		strearring: 0,
		intearring: 0,
		dexearring: 0,
		hpbelt: 0,
		ringsj: 0,
		strring: 0,
		intring: 0,
		dexring: 0,
		vitring: 0,
		hpamulet: 0,
		dexamulet: 0,
		intamulet: 0,
		stramulet: 0,
		vitearring: 0,
		dexbelt: 0,
		intbelt: 0,
		strbelt: 0
	}

setInterval(function() {

	if(parent != null && parent.socket != null)
	{
		upgrade();
		compound_items();
	}

}, 300);

function upgrade() {

	for (let i = 0; i < character.items.length; i++) 
	{
		let c = character.items[i];

		if (c) {
			var level = upgradeWhitelist[c.name];
			if(level && c.level < level)
			{
				let grades = get_grade(c);
				let scrollname;
				if (c.level < grades[0])
					scrollname = 'scroll0';
				else if (c.level < grades[1])
					scrollname = 'scroll1';
				else
					scrollname = 'scroll2';

				let [scroll_slot, scroll] = find_item(i => i.name == scrollname);
				if (!scroll) {
					parent.buy(scrollname);
				return;
			  }
			  parent.socket.emit('upgrade', {
				item_num: i,
				scroll_num: scroll_slot,
				offering_num: null,
				clevel: c.level
			  });
			  return;
			}
    	}
  	}
}
function compound_items() {
  let to_compound = character.items.reduce((collection, item, index) => {
    if (item && combineWhitelist[item.name] != null && item.level < combineWhitelist[item.name]) {
      let key = item.name + item.level;
      !collection.has(key) ? collection.set(key, [item.level, item_grade(item), index]) : collection.get(key).push(index);
    }
    return collection;
  }, new Map());
  for (var c of to_compound.values()) {
    let scroll_name = "cscroll" + c[1];
    for (let i = 2; i + 2 < c.length; i += 3) {
      let [scroll, _] = find_item(i => i.name == scroll_name);
      if (scroll == -1) {
        parent.buy(scroll_name);
        return;
      }
		game_log(scroll_name);
		game_log(c[i]);
		game_log(c[i+1]);
		game_log(c[i+2]);
      parent.socket.emit('compound', {
        items: [c[i], c[i + 1], c[i + 2]],
        scroll_num: scroll,
        offering_num: null,
        clevel: c[0]
      });
	  return;
    }
  }
}
function get_grade(item) {
  return parent.G.items[item.name].grades;
}
function find_item(filter) {
  for (let i = 0; i < character.items.length; i++) {
    let item = character.items[i];
    if (item && filter(item))
      return [i, character.items[i]];
  }
  return [-1, null];
}
